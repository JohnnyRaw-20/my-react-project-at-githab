{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialodItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Message/AddMessageForm.js","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messageseElements","messages","m","dialogsItems","values","addDialogsNameAndMessage","newDialogsMessageText","mapStateToPropsFoRedirect","state","isAuth","auth","compose","connect","dispatch","addDialogAndMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,2B,+FCgBpMC,EAbI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCAvBC,EAPC,SAACT,GACb,OACI,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMU,U,iCCEpCC,EAAcC,YAAiB,IAmBxBC,EAAuBC,YAAU,CAACC,KAAM,wBAAjBD,EAjBN,SAACd,GAE3B,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXZ,KAAK,wBACLa,YAAY,qBACZC,SAAU,CAACC,IAAUZ,MAEhC,6BACI,6DC4DDa,EAzEC,SAACxB,GAEb,IAAIyB,EAAkBzB,EAAM0B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QAChG6B,EAAoB/B,EAAM0B,YAAYM,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE/B,GAAIA,GAAI+B,EAAE/B,QAoD1G,OAEI,yBAAKC,UAAWC,IAAEuB,SACd,yBAAKxB,UAAWC,IAAE8B,cACbT,GAEL,yBAAKtB,UAAWC,IAAE4B,UACbD,GAEL,kBAAClB,EAAD,CAAqBG,SA1DC,SAACmB,GAC3BnC,EAAMoC,yBAAyBD,EAAOE,4B,wDCV9C,IAAIC,EAA4B,SAACC,GAAD,MAAY,CACxCC,OAAQD,EAAME,KAAKD,S,OC2FRE,sBACXC,aA9BmB,SAACJ,GACnB,MAAO,CACHb,YAAaa,EAAMb,gBAMH,SAACkB,GACtB,MAAO,CACHR,yBAA0B,SAACC,GACvBO,EAASC,YAAiCR,UDtEtB,SAACS,GAAc,IACrCC,EADqC,mC,2bAAA,yHAGnC,OAAIC,KAAKhD,MAAMwC,OACR,kBAACM,EAAcE,KAAKhD,OADG,kBAAC,IAAD,CAAUO,GAAI,eAHT,GACX0C,IAAMH,WAStC,OAFoCH,YAAQL,EAARK,CAAmCI,KCgF5DL,CAGblB","file":"static/js/4.9a6b31f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2_w6C\",\"dialog\":\"Dialogs_dialog__1hWwN\",\"active\":\"Dialogs_active__1dYa1\",\"dialogsItems\":\"Dialogs_dialogsItems__1PcWp\",\"messages\":\"Dialogs_messages__2CKV_\",\"message\":\"Dialogs_message__PD3eC\"};","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import {Field} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport { reduxForm} from \"redux-form\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMessageForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newDialogsMessageText\"\r\n                       placeholder=\"Enter Your message\"\r\n                       validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add name and message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux =  reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialodItem/DialogItem';\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageFormRedux} from \"./Message/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messageseElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>);\r\n\r\n    //==========================================================================================================\r\n    let onDialogsNameAndMessage = (values) => {\r\n        props.addDialogsNameAndMessage(values.newDialogsMessageText);\r\n        // alert(values.newDialogsMessageText);\r\n    };\r\n\r\n\r\n    //=================================================================================================================\r\n\r\n    // let newDialogsElement = React.createRef();                                /* C React.createRef()*/\r\n\r\n    // let onDialogsNameChange = (event) => {\r\n    //     // let text = newDialogsElement.current.value;\r\n    //     let text = event.target.value;\r\n    //     props.onDialogsNameChange(text);\r\n        // let nam = updateNewDialogsNameTextActionCreator(text);\r\n        // props.store.dispatch(nam);\r\n    // }\r\n\r\n    //==============================================================================================================\r\n    // let newMessageseElement = React.createRef();\r\n\r\n    // let onDialogsMessageChange = () => {\r\n    //     let text = newMessageseElement.current.value;\r\n    //     let mes = updateNewDialogsMessageTextActionCreator(text);\r\n    //     props.dispatch(mes);\r\n//=================================================================================================================\r\n//\r\n//     let onDialogsMessageChange = (e) => {\r\n//         let text = e.target.value;\r\n//         props.onDialogsMessageChange(text);                                       /*Без React.createRef()*/\r\n        // let text = e.target.value\r\n        // let mes = updateNewDialogsMessageTextActionCreator(text);\r\n        // props.store.dispatch(mes);\r\n    // }\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>;                            /*Redirect урок 68*/\r\n\r\n\r\n    // let onDialogsNameAndMessageChange = (values) => {\r\n    //     props.addDialogsNameAndMessage(values.newDialogsNameText);\r\n    //     props.addDialogsNameAndMessage(values.newDialogsMessageText);\r\n    // }\r\n\r\n    // let onDialogsNameChange = (values) => {\r\n    //     props.addDialogsNameAndMessage(values.newDialogsNameText);\r\n    // }\r\n    // let onDialogsMessageChange = (values) => {\r\n    //     props.addDialogsNameAndMessage(values.newDialogsMessageText);\r\n    // }\r\n\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageseElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={onDialogsNameAndMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsFoRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {                                           /*HOC урок 69*/\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'} />                       /*Redirect урок 68*/\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsFoRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {\r\n    addDialogAndMessageActionCreator\r\n    // updateNewDialogsMessageTextActionCreator,\r\n    // updateNewDialogsNameTextActionCreator\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//\r\n//     let state = props.store.getState();\r\n//\r\n//     // let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n//     //\r\n//     // let messageseElements = state.messages.map(m => <Message message={m.message} id={m.id}/>);\r\n//\r\n//\r\n//     let addDialogsNameAndMessage = () => {\r\n//         // props.addDialogsNameAndMessage();\r\n//         props.store.dispatch(addDialogAndMessageActionCreator());\r\n//     };\r\n//\r\n// //=================================================================================================================\r\n//\r\n//     // let newDialogsElement = React.createRef();                                /* C React.createRef()*/\r\n//\r\n//     let onDialogsNameChange = (text) => {\r\n//         // let text = newDialogsElement.current.value;\r\n//         let nam = updateNewDialogsNameTextActionCreator(text);\r\n//         props.store.dispatch(nam);\r\n//     }\r\n//\r\n//     //==============================================================================================================\r\n//     // let newMessageseElement = React.createRef();\r\n//\r\n//     // let onDialogsMessageChange = () => {\r\n//     //     let text = newMessageseElement.current.value;\r\n//     //     let mes = updateNewDialogsMessageTextActionCreator(text);\r\n//     //     props.dispatch(mes);\r\n// //=================================================================================================================\r\n//\r\n//     let onDialogsMessageChange = (text) => {                                    /*Без React.createRef()*/\r\n//         // let text = e.target.value\r\n//         let mes = updateNewDialogsMessageTextActionCreator(text);\r\n//         props.store.dispatch(mes);\r\n//     }\r\n//\r\n//\r\n//\r\n//     return (\r\n//         <Dialogs\r\n//             addDialogsNameAndMessage={addDialogsNameAndMessage}\r\n//             onDialogsNameChange={onDialogsNameChange}\r\n//             onDialogsMessageChange={onDialogsMessageChange}\r\n//             newDialogsNameText={state.dialogsPage.newDialogsNameText}\r\n//             newDialogsMessageText={state.dialogsPage.newDialogsMessageText}\r\n//             dialogsPage={state.dialogsPage}\r\n//         />\r\n//     )\r\n// }\r\n\r\n let mapStateToProps = (state) => {\r\n     return {\r\n         dialogsPage: state.dialogsPage,\r\n         // newDialogsNameText: state.dialogsPage.newDialogsNameText,\r\n         // newDialogsMessageText: state.dialogsPage.newDialogsMessageText,\r\n     }\r\n }\r\n\r\nlet mapDispatchToProps = (dispatch) => {     /*newDialogsNameText,*/\r\n    return {\r\n        addDialogsNameAndMessage: (newDialogsMessageText) => {\r\n            dispatch(addDialogAndMessageActionCreator(newDialogsMessageText));\r\n        }\r\n        // onDialogsNameChange: (text) => {\r\n        //     let nam = updateNewDialogsNameTextActionCreator(text);\r\n        //     dispatch(nam);\r\n        // },\r\n        // onDialogsMessageChange: (text)=> {\r\n        //     let mes = updateNewDialogsMessageTextActionCreator(text);\r\n        //     dispatch(mes);\r\n        // }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose(                                        /*compose урок 70*/\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect                                         /*HOC урок 69*/\r\n)(Dialogs)"],"sourceRoot":""}